// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enhanced Tenant/Company model with new limits
model Company {
  id            String   @id @default(cuid())
  name          String
  domain        String   @unique
  address       String?  // Added for company registration
  employeeCount Int?     // Added for company registration
  isActive      Boolean  @default(true)
  
  // New company limits as per requirements
  userLimit     Int      @default(50)    // Total user limit per company
  managerLimit  Int      @default(10)    // Manager user limit per company
  tokenLimit    Int      @default(50000) // Monthly OpenAI token limit
  
  settings      Json     @default("{}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  users         User[]
  staff         Staff[]
  rosters       Roster[]
  roles         Role[]
  auditLogs     AuditLog[]
  storeLocations StoreLocation[]
  tokenUsage    TokenUsage[]
  rosterFolders RosterFolder[]

  @@map("companies")
}

// New StoreLocation entity for multi-location support
model StoreLocation {
  id        String   @id @default(cuid())
  name      String
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Company relationship
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  staffAssignments StaffStoreLocation[]

  @@map("store_locations")
}

// Junction table for staff-store location assignments
model StaffStoreLocation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relationships
  staffId         String
  staff           Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)
  storeLocationId String
  storeLocation   StoreLocation @relation(fields: [storeLocationId], references: [id], onDelete: Cascade)

  @@unique([staffId, storeLocationId])
  @@map("staff_store_locations")
}

// Enhanced User model with phone field
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  passwordHash String
  phone        String?   // Added phone number field
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  preferences  Json      @default("{}")
  
  // 2FA fields
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Multi-company relationship
  companyId     String
  company       Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Role relationship
  roleId       String
  role         Role      @relation(fields: [roleId], references: [id])

  // Relations
  auditLogs     AuditLog[]
  notifications Notification[]
  tokenUsage    TokenUsage[]

  @@map("users")
}

// Enhanced Role model with proper 4-tier hierarchy
model Role {
  id          String   @id @default(cuid())
  name        String   // admin, owner, manager, staff
  description String?
  permissions Json     @default("[]")
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-company relationship
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  users       User[]

  @@unique([companyId, name])
  @@map("roles")
}

// Enhanced Staff model with store location support
model Staff {
  id           String    @id @default(cuid())
  name         String
  email        String
  phone        String?
  position     String
  department   String
  hourlyRate   Decimal?  @db.Decimal(10, 2)
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean   @default(true)
  avatar       String?
  preferences  Json      @default("{}")
  
  // New fields for enhanced registration
  weeklyAvailability String[] @default([])
  shiftPreferences   String[] @default([])
  contractType       String?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Multi-company relationship
  companyId     String
  company       Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  shifts              Shift[]
  availability        StaffAvailability[]
  storeAssignments    StaffStoreLocation[]

  @@unique([companyId, email])
  @@map("staff")
}

// Existing models with enhancements
model StaffAvailability {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Staff relationship
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("staff_availability")
}

// Enhanced Roster model with folder support
model Roster {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  isPublished Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  notes       String?
  
  // New folder organization feature
  folderId    String?
  folder      RosterFolder? @relation(fields: [folderId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-company relationship
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  shifts      Shift[]

  @@map("rosters")
}

// New RosterFolder model for organization
model RosterFolder {
  id        String   @id @default(cuid())
  name      String
  color     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Multi-company relationship
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  // Relations
  rosters   Roster[]

  @@map("roster_folders")
}

// Existing Shift model (unchanged)
model Shift {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  position    String
  notes       String?
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rosterId    String
  roster      Roster   @relation(fields: [rosterId], references: [id], onDelete: Cascade)
  
  staffId     String
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("shifts")
}

// New TokenUsage model for AI tracking
model TokenUsage {
  id          String   @id @default(cuid())
  month       Int      // 1-12
  year        Int
  tokensUsed  Int      @default(0)
  cost        Decimal  @db.Decimal(10, 4) @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  companyId    String
  company      Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId, month, year])
  @@map("token_usage")
}

// Existing models remain unchanged
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relationships
  companyId  String
  company    Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
