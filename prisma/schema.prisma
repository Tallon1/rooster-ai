// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant model for multi-tenancy
model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  isActive    Boolean  @default(true)
  maxUsers    Int      @default(50)
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  staff       Staff[]
  rosters     Roster[]
  roles       Role[]
  auditLogs   AuditLog[]

  @@map("tenants")
}

// User model for authentication
model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  passwordHash String
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  preferences  Json      @default("{}")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Multi-tenant relationship
  tenantId     String
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Role relationship
  roleId       String
  role         Role      @relation(fields: [roleId], references: [id])

  // Relations
  auditLogs    AuditLog[]
  notifications Notification[]

  @@map("users")
}

// Role model for RBAC
model Role {
  id          String   @id @default(cuid())
  name        String
  description String?
  permissions Json     @default("[]")
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenant relationship
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  users       User[]

  @@unique([tenantId, name])
  @@map("roles")
}

// Staff model for roster management
model Staff {
  id           String    @id @default(cuid())
  name         String
  email        String
  phone        String?
  position     String
  department   String
  hourlyRate   Decimal?  @db.Decimal(10, 2)
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean   @default(true)
  avatar       String?
  preferences  Json      @default("{}")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Multi-tenant relationship
  tenantId     String
  tenant       Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  shifts       Shift[]
  availability StaffAvailability[]

  @@unique([tenantId, email])
  @@map("staff")
}

// Staff availability model
model StaffAvailability {
  id        String   @id @default(cuid())
  dayOfWeek Int      // 0 = Sunday, 1 = Monday, etc.
  startTime String   // HH:MM format
  endTime   String   // HH:MM format
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Staff relationship
  staffId   String
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("staff_availability")
}

// Roster model
model Roster {
  id          String   @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  isPublished Boolean  @default(false)
  isTemplate  Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Multi-tenant relationship
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Relations
  shifts      Shift[]

  @@map("rosters")
}

// Shift model
model Shift {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  position    String
  notes       String?
  isConfirmed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  rosterId    String
  roster      Roster   @relation(fields: [rosterId], references: [id], onDelete: Cascade)
  
  staffId     String
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@map("shifts")
}

// Notification model
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relationship
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Audit log model for compliance
model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String
  oldData   Json?
  newData   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relationships
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}
